{"version":3,"file":"static/js/407.eb970a65.chunk.js","mappings":"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","sources":["webpack://contrib-stats/./src/components/Dashboard/Dashboard.module.scss?5e1c","helpers/useUpdateEffect.tsx","components/DashboardForm/DashboardForm.tsx","webpack://contrib-stats/./src/components/DashboardStats/DashboardStats.module.scss?b231","components/DashboardStats/DashboardStats.tsx","webpack://contrib-stats/./src/components/MetricsTable/MetricsTable.module.scss?1fa5","components/MetricsTable/MetricsTable.tsx","components/Dashboard/Dashboard.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Dashboard\":\"Dashboard_Dashboard__JhvwZ\",\"statCard\":\"Dashboard_statCard__eACPw\"};","import { useEffect, useRef } from \"react\";\n\n/**\n * A custom useEffect hook that only triggers on updates, not on initial mount\n * @param {Function} effect\n * @param {Array<any>} dependencies\n */\n export default function useUpdateEffect(effect: any, dependencies: any[]) {\n    const isInitialMount = useRef(true);\n  \n    useEffect(() => {\n      if (isInitialMount.current) {\n        isInitialMount.current = false;\n      } else {\n        return effect();\n      }\n    }, dependencies);\n  }\n","import React, { FC, useState } from 'react';\nimport { Button, Form, Row, Col, Container, Spinner, InputGroup } from 'react-bootstrap';\nimport { Octokit } from 'octokit';\nimport useUpdateEffect from '../../helpers/useUpdateEffect';\n\ninterface DashboardFormProps {\n    contributors: string[]\n    isLoading: boolean\n    handleAuthTokenUpdate: Function\n    handleFetchUsers: Function\n    handleFormSubmit: Function\n}\n\nconst DashboardForm: FC<DashboardFormProps> = (props) => {\n    const isLoading = props.isLoading\n    const contributors = props.contributors\n\n    const [form, setFromValue] = useState({repo: '', authToken: '', contributorId: ''})\n    const [allowSubmit, setAllowSubmit] = useState(false)\n\n    useUpdateEffect(() => props.handleAuthTokenUpdate(form.authToken), [form.authToken])\n\n    useUpdateEffect(() => updateAllowSubmitFlag(form), [form])\n\n    // on form input changes\n    const handleInputChange = (event: any) => {\n        const name = event.target.name\n        const value = event.target.value\n        \n        setFromValue((prevState) => ({\n            ...prevState,\n            [name]: value,\n        }))\n    }\n\n    const updateAllowSubmitFlag = (form : {authToken: string, repo: string, contributorId: string}): void => {\n        if(form.repo && form.authToken && form.contributorId)\n            setAllowSubmit(true)\n        else \n            setAllowSubmit(false)\n    }\n\n    const handleFetchUsers = (event: any) => {\n        props.handleFetchUsers(event, form.repo)\n    }\n\n    const handleFormSubmit = (event: any) => {\n        props.handleFormSubmit(event, form)\n    }\n    \n    return (\n        <Container>\n            <Form onSubmit={handleFormSubmit}>\n                <Row>             \n                    <Col lg={{span: 3,  offset: 1}}>\n                        <Form.Group>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"authToken\"\n                                aria-describedby=\"Auth Token\"\n                                placeholder='Personal Access Token'\n                                value={form.authToken}\n                                onChange={handleInputChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col lg={{span: 3}}>\n                        <Form.Group>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"repo\"\n                                aria-describedby=\"owner and repo\"\n                                placeholder='repo owner/name'\n                                value={form.repo}\n                                onChange={handleInputChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col lg={{span: 3}}>\n                        <Form.Group>\n                            <InputGroup>\n                                <Form.Select name='contributorId' aria-label=\"Contributor select\" onChange={handleInputChange} value={form.contributorId}>\n                                    <option>Select Contributor</option>\n                                    { contributors.map((contributor: any) => <option key={contributor} value={contributor}>{contributor}</option>) }\n                                </Form.Select>\n                                <Button onClick={handleFetchUsers} variant=\"outline-secondary\" id=\"button-addon2\">\n                                Get Users\n                                </Button>\n                            </InputGroup>\n                        </Form.Group>\n                    </Col>\n                    <Col lg={{span: 2}}>\n                        <Form.Group>\n                            <Button type='submit' variant=\"outline-secondary\" disabled={isLoading || !allowSubmit}>\n                                { isLoading ? (<Spinner as=\"span\" size=\"sm\" animation=\"border\" variant=\"secondary\" />) : ('Analyze')}\n                            </Button>\n                        </Form.Group>\n                    </Col>\n                </Row>\n            </Form>\n        </Container>\n    )\n    \n};\n\nexport default DashboardForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"statCard\":\"DashboardStats_statCard__ItfwI\"};","import React, { FC } from 'react';\nimport styles from './DashboardStats.module.scss';\nimport { Row, Col, Card, Container } from 'react-bootstrap';\nimport AnimatedNumbers from \"react-animated-numbers\";\n\ninterface DashboardStatsProps {\n    stats: {totalPulls: number,\n            avgOpenToCloseInMins: number,\n            avgComments: number,\n            pullsWithNoChanges: number,\n            highestCommentsOnPR: number}\n}\n\nconst DashboardStats: FC<DashboardStatsProps> = React.memo(\n    ({stats}: DashboardStatsProps) => {\n        return (\n            <Container>\n            <Row>\n                <Col lg={{span: 3, offset: 1}}>\n                    <Card text={'light'} className={styles.statCard}>\n                        <Card.Body>\n                            <Card.Text>Pull-requests merged</Card.Text>\n                            <h2>\n                                <AnimatedNumbers animateToNumber={stats.totalPulls}></AnimatedNumbers>\n                            </h2>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col lg={{span: 4}}>\n                    <Card text={'light'} className={styles.statCard}>\n                        <Card.Body>\n                            <Card.Text>Pull-requests with no changes requested</Card.Text>\n                            <h2>\n                                <AnimatedNumbers animateToNumber={stats.pullsWithNoChanges}></AnimatedNumbers>\n                            </h2>\n                        </Card.Body>\n                    </Card>   \n                </Col>\n                <Col lg={{span: 3}}>\n                    <Card text={'light'} className={styles.statCard}>\n                        <Card.Body>\n                            <Card.Text>Highest Comments on a PR</Card.Text>\n                            <h2>\n                                <AnimatedNumbers animateToNumber={stats.highestCommentsOnPR}></AnimatedNumbers>\n                            </h2>\n                        </Card.Body>\n                    </Card>   \n                </Col>\n            </Row>\n            <Row>\n                <Col lg={{span: 5, offset: 1}}>\n                    <Card text={'light'} className={styles.statCard}>\n                        <Card.Body>\n                            <Card.Text>Avg. comments per pull-request</Card.Text>\n                            <h2>\n                                <AnimatedNumbers animateToNumber={stats.avgComments}></AnimatedNumbers>\n                            </h2>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col lg={{span: 5}}>\n                <Card text={'light'} className={styles.statCard}>\n                        <Card.Body>\n                            <Card.Text>Avg. time between PR creation and merge</Card.Text>\n                            <h2 className='d-flex'>\n                                <AnimatedNumbers includeComma animateToNumber={stats.avgOpenToCloseInMins}></AnimatedNumbers>\n                                <span>&nbsp;hrs</span>\n                            </h2>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n            </Container>\n        )\n    }\n)\n\nexport default DashboardStats;\n","// extracted by mini-css-extract-plugin\nexport default {\"metricsSection\":\"MetricsTable_metricsSection__W5NE6\",\"tableWrapper\":\"MetricsTable_tableWrapper__xNH1n\",\"statCard\":\"MetricsTable_statCard__m63ZG\"};","import React, { FC } from 'react';\nimport { Table, Row, Col, Container } from 'react-bootstrap';\nimport styles from './MetricsTable.module.scss';\n\ninterface MetricsTableProps {\n    metrics: {w: number, a: number, d: number, c: number}[]\n}\n\nconst MetricsTable: FC<MetricsTableProps> = React.memo(\n    ({metrics}: MetricsTableProps) => {\n        return (\n            <Container className={styles.metricsSection}>\n                <Row>\n                    <Col lg={{span: 11,  offset: 1}}>\n                        <h5>Weekly Contribution Break-down</h5>\n                    </Col>\n\n                    <Col className={styles.tableWrapper} lg={{span: 10,  offset: 1}}>\n                        <Table  striped hover>\n                            <thead>\n                                <tr>\n                                <th>Week #</th>\n                                <th>Lines Added</th>\n                                <th>Lines Removed</th>\n                                <th>Commits</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                { metrics.map((metricRow: any, index) => \n                                    <tr key={index}>\n                                        <td>{new Date(metricRow.w*1000).toLocaleDateString()}</td>\n                                        <td>{metricRow.a}</td>\n                                        <td>{metricRow.d}</td>\n                                        <td>{metricRow.c}</td>\n                                    </tr>\n                                )}                       \n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>\n        )\n    }\n)\n\nexport default MetricsTable;\n","import React, { FC, useState } from 'react';\nimport styles from './Dashboard.module.scss';\nimport { Octokit } from 'octokit';\nimport { Container, Navbar } from 'react-bootstrap';\n\nimport useUpdateEffect from '../../helpers/useUpdateEffect';\nimport DashboardForm from '../DashboardForm/DashboardForm';\nimport DashboardStats from '../DashboardStats/DashboardStats';\nimport MetricsTable from '../MetricsTable/MetricsTable';\n\ninterface DashboardProps {}\n\n// helper methhods\nconst isNotOlderThan = (startEpoch: any, dateString: any): boolean => {\n    const entryEpoch = Date.parse(dateString)\n\n    return (entryEpoch >= startEpoch) || false\n}\n\nconst isNotFromAuthor = (comment: any) => {\n    return comment.user && comment.user.login !== \"gopalanaika\"\n}\n\nconst calculateAvgComments = (pullsCount: number, commentsCount: number): number => {\n    return Math.round(commentsCount / pullsCount)\n}\n\nconst calculateAvgOpenToCloseTime = (pulls: any): number => {\n    let pullsOpenToCloseTime: number[] = []\n    let sumOfAllTimesInMins = 0\n    pulls.forEach((pull: any) => {\n        let createdTimeStamp = Date.parse(pull.created_at)\n        let closedTimeStamp = Date.parse(pull.closed_at)\n        let timeToClosureInMins = (closedTimeStamp - createdTimeStamp) / 3600000\n        pullsOpenToCloseTime.push(timeToClosureInMins)\n    })\n    \n    if(pullsOpenToCloseTime.length > 0) {\n        sumOfAllTimesInMins = pullsOpenToCloseTime.reduce((sum: number, x: number) => sum + x)        \n    }\n\n    return Math.round((sumOfAllTimesInMins) / pullsOpenToCloseTime.length)\n}\n\nconst getReviewComments = (\n    octokit: Octokit,\n    pulls: any,\n    setIsLoading: Function,\n    setStateCallback: Function) => {\n\n    let $reviewCommentsRequests: any = []\n    let reviewComments: any[][] | any[] = []\n\n    pulls.forEach((pull: any) => \n        $reviewCommentsRequests.push(\n            octokit.request('GET /repos/{owner}/{repo}/pulls/{pull_number}/comments', \n            {\n                owner: 'infer-ai',\n                repo: 'idc-portal-ui',\n                pull_number: pull.number\n            }).then((response: any) => {\n                if(response.data && response.data.length > 0) {\n                    reviewComments.push(response.data.filter((comment: any) => isNotFromAuthor(comment)))\n                }\n            })\n        )\n    )\n\n    Promise.all($reviewCommentsRequests).then(() => setStateCallback(reviewComments)).finally(() => setIsLoading(false))\n}\n\nconst getContributors = (\n    octokit: Octokit,\n    repoName: string,\n    setIsLoading: Function,\n    setStateCallback: Function): void => {\n\n    octokit.request('GET /repos/{owner}/{repo}/collaborators?per_page=100', {\n        owner: repoName.split('/')[0],\n        repo: repoName.split('/')[1]\n    })\n    .then((response: any) => {\n        let contributors = response.data\n        contributors = contributors.map((collaborator: any) => collaborator.login)\n        setStateCallback(contributors)\n    }).finally(() => setIsLoading(false))\n}\n\nconst getPulls = (\n    octokit: Octokit,\n    startEpoch: number,\n    form: any,\n    setStateCallback: Function) => {\n\n    let filteredPulls: {}[] = []\n    let q = 'q=' + encodeURIComponent(`is:pr is:closed repo:${form.repo} author:${form.contributorId}`)\n    \n    octokit.request(`GET /search/issues?${q}&per_page=100`).then((response: any) => {\n        filteredPulls = response.data && response.data.items\n        filteredPulls = filteredPulls.filter((pull: any) => isNotOlderThan(startEpoch, pull.created_at))\n        setStateCallback(filteredPulls)\n    })\n}\n\nconst calculatePullsWithNoChanges = (totalPulls: number, PRWithComments: number): number => {\n    let pullsWithNoChanges = totalPulls - PRWithComments\n    return pullsWithNoChanges\n}\n\nconst calculateHighestReviewComments = (reviewComments: any): number => {\n    let highestComments = 0\n    const noOfCommentsPerPR = reviewComments.map((comments: any) => comments.length)\n    noOfCommentsPerPR.forEach((commentCount: number) => {\n        if(commentCount > highestComments)\n            highestComments = commentCount\n    })\n\n    return highestComments\n}\n\nconst computeStats = (pulls: any[], reviewComments: any[], setStateCallback: Function): void => {\n    const avgComments = calculateAvgComments(pulls.length, reviewComments.flat().length)\n    const avgOpenToCloseInMins = calculateAvgOpenToCloseTime(pulls)\n    const pullsWithNoChanges = calculatePullsWithNoChanges(pulls.length, reviewComments.length)\n    const highestCommentsOnPR = calculateHighestReviewComments(reviewComments)\n    setStateCallback({ totalPulls: pulls.length, avgComments, avgOpenToCloseInMins, pullsWithNoChanges, highestCommentsOnPR })\n}\n\nconst getContributorMetrics = (formData: any, setStateCallback: Function): void => {\n    let repoName = formData.repo \n    let contributorId = formData.contributorId\n    octokit.request('GET /repos/{owner}/{repo}/stats/contributors', {\n        owner: repoName.split('/')[0],\n        repo: repoName.split('/')[1]\n    })\n    .then((response: any) => {\n        let selectedContributorMetrics = \n            response.data.find((entry: any) => \n            entry.author && entry.author.login === contributorId\n        )\n        const weeklyMetrics = selectedContributorMetrics.weeks.slice(-12)\n        setStateCallback(weeklyMetrics)\n        // selectedContributorMetrics && selectedContributorMetrics\n        // metric based rank with the team\n    })\n}\n\nlet octokit = new Octokit()\n\n// Component\nconst Dashboard: FC<DashboardProps> = React.memo(\n    () => {\n        let today = new Date()\n        today.setDate(1)\n        today.setMonth(today.getMonth() - 2)\n        let startEpoch = Number(today)\n        \n        const [contributors, setContributors] = useState<string[]>([])\n        const [isLoading, setIsLoading] = useState(false)\n        const [pulls, setPulls] = useState<{}[]>([])\n        const [contributorMetrics, setMetrics] = useState<{w: number, a: number, d: number, c: number}[]>([])\n        \n        const [reviewComments, setComments] = useState<{}[]>([])\n        const [stats, setStats] = useState({totalPulls: 0, avgOpenToCloseInMins: 0, avgComments: 0, pullsWithNoChanges: 0, highestCommentsOnPR: 0})\n                \n        // on pull requests fetch complete\n        useUpdateEffect(() => getReviewComments(octokit, pulls, setIsLoading, setComments), [pulls])\n        // on comments fetch complete\n        useUpdateEffect(() => computeStats(pulls, reviewComments, setStats), [reviewComments])\n\n        const handleFetchUsers = (event: any, repoName: string) => {\n            getContributors(octokit, repoName, setIsLoading, setContributors)\n        }\n\n        const handleAuthTokenUpdate = (authToken: string) => {\n            octokit = new Octokit({auth: authToken})\n        }\n        \n        // on form submit\n        const handleFormSubmit = (event: any, formData: any) => {\n            event.preventDefault()\n            setIsLoading(true)\n            getPulls(octokit, startEpoch, formData, setPulls)\n            getContributorMetrics(formData, setMetrics)\n        }\n        \n        return (\n            <>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                        <Container>\n                            <Navbar.Brand href=\"#home\">Contributor Stats</Navbar.Brand>\n                            <Navbar.Text>Computed from: {today.toDateString()}</Navbar.Text>\n                        </Container>\n                </Navbar>\n                <Container className={styles.Dashboard} data-testid=\"Dashboard\" fluid>\n                    <DashboardForm\n                        handleAuthTokenUpdate={handleAuthTokenUpdate}\n                        contributors={contributors}\n                        handleFetchUsers={handleFetchUsers}\n                        isLoading={isLoading}\n                        handleFormSubmit={handleFormSubmit} >\n                    </DashboardForm>\n                    <DashboardStats stats={stats}></DashboardStats>\n                    <MetricsTable metrics={contributorMetrics}></MetricsTable>\n                </Container>\n            </>\n        );\n    }\n)\n\nexport default Dashboard;\n"],"names":["useUpdateEffect","effect","dependencies","isInitialMount","useRef","useEffect","current","props","isLoading","contributors","useState","repo","authToken","contributorId","form","setFromValue","allowSubmit","setAllowSubmit","handleAuthTokenUpdate","updateAllowSubmitFlag","handleInputChange","event","name","target","value","prevState","Container","Form","onSubmit","handleFormSubmit","Row","Col","lg","span","offset","type","placeholder","onChange","InputGroup","map","contributor","Button","onClick","handleFetchUsers","variant","id","disabled","Spinner","as","size","animation","React","stats","Card","text","className","styles","animateToNumber","totalPulls","pullsWithNoChanges","highestCommentsOnPR","avgComments","includeComma","avgOpenToCloseInMins","metrics","Table","striped","hover","metricRow","index","Date","w","toLocaleDateString","a","d","c","getPulls","octokit","startEpoch","setStateCallback","filteredPulls","q","encodeURIComponent","request","then","response","data","items","filter","pull","dateString","parse","isNotOlderThan","created_at","computeStats","pulls","reviewComments","pullsCount","commentsCount","PRWithComments","length","flat","Math","round","pullsOpenToCloseTime","sumOfAllTimesInMins","forEach","createdTimeStamp","timeToClosureInMins","closed_at","push","reduce","sum","x","calculateAvgOpenToCloseTime","highestComments","comments","commentCount","calculateHighestReviewComments","Octokit","Dashboard","today","setDate","setMonth","getMonth","Number","setContributors","setIsLoading","setPulls","contributorMetrics","setMetrics","setComments","setStats","$reviewCommentsRequests","owner","pull_number","number","comment","user","login","isNotFromAuthor","Promise","all","finally","getReviewComments","Navbar","bg","href","toDateString","fluid","auth","repoName","split","collaborator","getContributors","formData","preventDefault","weeklyMetrics","find","entry","author","weeks","slice","getContributorMetrics"],"sourceRoot":""}